-- dominios

CREATE DOMAIN nombre AS
varchar(80) NOT NULL;

CREATE DOMAIN naturalnum AS
INT CHECK(value > 0);

CREATE DOMAIN semestreAcadem AS
VARCHAR(6) CHECK(value LIKE '____-_');

CREATE DOMAIN emailDom AS
VARCHAR(80) CHECK(value LIKE '%@%.%' OR value LIKE '%@%.%.%');

CREATE TYPE  rolJurado AS
ENUM ('interno', 'externo');

CREATE TYPE  nivelPrograma AS
ENUM ('doctorado', 'maestria','diplomado');

-- tablas

CREATE TABLE Persona (
    PersonaID naturalnum PRIMARY KEY,
    Nombres nombre,
    Apellidos nombre
);

CREATE TABLE Departamento (
    DepartamentoID naturalnum PRIMARY KEY,
    NomFacultad nombre,
    NombreDep nombre UNIQUE
);

CREATE TABLE Programa (
    ProgramaID naturalnum PRIMARY KEY,
    Nombre nombre UNIQUE,
    Nivel nivelPrograma,
    DepartamentoID naturalnum,
    FOREIGN KEY (DepartamentoID) REFERENCES Departamento(DepartamentoID)
);

CREATE TABLE Estudiante (
    EstudianteID naturalnum PRIMARY KEY,
    Email emailDom UNIQUE,
    FechaInscrip DATE,
    ProgramaID naturalnum,
    FOREIGN KEY (ProgramaID) REFERENCES Programa(ProgramaID)
);

CREATE TABLE Curso (
    CursoID naturalnum PRIMARY KEY,
    Nombre nombre UNIQUE,
    Creditos naturalnum
);

CREATE TABLE Semestre (
    SemestreID semestreAcadem PRIMARY KEY,
    FechaIni DATE,
    FechaClau DATE
);

CREATE TABLE Matricula (
    CursoID INT,
    EstudianteID INT,
    Semestre semestreAcadem,
    PRIMARY KEY (CursoID, EstudianteID),
    FOREIGN KEY (CursoID) REFERENCES Curso(CursoID),
    FOREIGN KEY (EstudianteID) REFERENCES Estudiante(EstudianteID)
);

CREATE TABLE Contiene (
    CursoID naturalNum,
    ProgramaID naturalNum,
    PRIMARY KEY (CursoID, ProgramaID),
    FOREIGN KEY (CursoID) REFERENCES Curso(CursoID),
    FOREIGN KEY (ProgramaID) REFERENCES Programa(ProgramaID)
);

CREATE TABLE Profesor (
    ProfesorID naturalnum PRIMARY KEY,
    Email emailDom UNIQUE,
    DepartamentoID naturalnum,
    FOREIGN KEY (DepartamentoID) REFERENCES Departamento(DepartamentoID)
);

CREATE TABLE Dicta (
    Semestre semestreAcadem,
    CursoID naturalnum,
    ProfesorID naturalnum,
    PRIMARY KEY (Semestre, CursoID, ProfesorID),
    FOREIGN KEY (Semestre) REFERENCES Semestre(SemestreID),
    FOREIGN KEY (CursoID) REFERENCES Curso(CursoID),
    FOREIGN KEY (ProfesorID) REFERENCES Profesor(ProfesorID)
);

CREATE TABLE Tesis (
    TesisID naturalnum PRIMARY KEY,
    Titulo nombre UNIQUE,
    FechaIni DATE,
    FechaDef DATE,
    EstudianteID naturalnum,
    AsesorID naturalnum,
    FOREIGN KEY (EstudianteID) REFERENCES Estudiante(EstudianteID),
    FOREIGN KEY (AsesorID) REFERENCES Profesor(ProfesorID)
);

CREATE TABLE Jurado (
    JuradoID naturalnum PRIMARY KEY,
    Rol rolJurado not null
);

CREATE TABLE Juzga (
    JuradoID naturalnum,
    TesisID  naturalnum,
    PRIMARY KEY (JuradoID, TesisID),
    FOREIGN KEY (JuradoID) REFERENCES Jurado(JuradoID),
    FOREIGN KEY (TesisID) REFERENCES Tesis(TesisID)
);

-- datos

INSERT INTO Departamento (DepartamentoID, NombreDep, NomFacultad) VALUES
(501, 'Departamento de Matematicas', 'Facultad de Ciencias'),
(502, 'Departamento de Fisica', 'Facultad de Ciencias'),
(503, 'Departamento de Quimica', 'Facultad de Ciencias'),
(504, 'Departamento de Biologia', 'Facultad de Ciencias'),
(505, 'Departamento de Ciencias de la Computacion', 'Facultad de Ciencias'),
(506, 'Departamento de Mecanica', 'Facultad de Ingenieria Mecanica y Electrica'),
(507, 'Departamento de Electronica', 'Facultad de Ingenieria Electrica y Electronica'),
(508, 'Departamento de Ambiental', 'Facultad de Ingenieria Ambiental'),
(509, 'Departamento de Ciberseguridad', 'Facultad de Ingenieria Electrica y Electronica'),
(510, 'Departamento de Civil', 'Facultad de Ingenieria Civil'),
(511, 'Departamento de Minas', 'Facultad de Ingenieria Minera y Metalurgica'),
(512, 'Departamento de Ingenieria Quimica', 'Facultad de Ingenieria Quimica y Textil');

INSERT INTO Programa (ProgramaID, Nombre, Nivel, DepartamentoID) VALUES
(601, 'Maestria en Ingenieria Civil', 'maestria', 510),
(602, 'Maestria en Ciencias de la Computacion', 'maestria', 505),
(603, 'Doctorado en Ingenieria Electrica', 'doctorado', 507),
(604, 'Maestria en Fisica Aplicada', 'maestria', 502),
(605, 'Doctorado en Quimica Organica', 'doctorado', 503),
(606, 'Maestria en Biotecnologia', 'maestria', 504),
(607, 'Doctorado en Matematicas Aplicadas', 'doctorado', 501),
(608, 'Maestria en Sistemas de Informacion Geografica', 'maestria', 505),
(609, 'Maestria en Ingenieria Mecanica', 'maestria', 506),
(610, 'Doctorado en Ciencia de Materiales', 'doctorado', 502),
(611, 'Maestria en Robotica y Automatizacion', 'maestria', 506),
(612, 'Doctorado en Fisica de Particulas', 'doctorado', 502),
(613, 'Maestria en Ingenieria Ambiental', 'maestria', 508),
(614, 'Doctorado en Nanotecnologia', 'doctorado', 502),
(615, 'Maestria en Analisis de Datos y Ciencia Computacional', 'maestria', 505),
(616, 'Doctorado en Ingenieria de Sistemas Energeticos', 'doctorado', 502),
(617, 'Maestria en Ingenieria de Software', 'maestria', 505),
(618, 'Doctorado en Ingenieria Geotecnica', 'doctorado', 511),
(619, 'Maestria en Tecnologias de la Informacion y Comunicaciones', 'maestria', 505),
(620, 'Doctorado en Quimica Ambiental', 'doctorado', 503);

INSERT INTO Curso (CursoID, Nombre, Creditos) VALUES
(201, 'Introduccion a la Ingenieria Mecanica', 4),
(202, 'Fundamentos de Programacion', 3),
(203, 'Quimica Organica', 3),
(204, 'Calculo Diferencial', 4),
(205, 'Fisica Moderna', 3),
(206, 'Termodinamica', 3),
(207, 'Ecuaciones Diferenciales', 4),
(208, 'Diseño de Circuitos Electronicos', 4),
(209, 'Materiales de Ingenieria', 3),
(210, 'Metodos Numericos', 3),
(211, 'Ingenieria Ambiental', 3),
(212, 'Biologia Celular', 4),
(213, 'Gestion de Recursos Hidricos', 3),
(214, 'Tecnologias de Extraccion Minera', 4),
(215, 'Procesos Quimicos Industriales', 3),
(216, 'Dinamica de Suelos y Rocas', 3),
(217, 'Diseño Estructural Avanzado', 4);

INSERT INTO Estudiante (EstudianteID, Email, FechaInscrip, ProgramaID) VALUES
(1, 'ana.lopez@example.com', '2022-01-10', 601),
(2, 'juan.martinez@example.com', '2022-02-02', 602),
(3, 'marta.rivas@example.com', '2023-05-20', 603),
(4, 'lucas.fernandez@example.com', '2023-03-05', 604),
(5, 'sofia.guerra@example.com', '2021-04-28', 605),
(6, 'pablo.rojas@example.com', '2022-11-02', 606),
(7, 'claudia.bravo@example.com', '2023-04-04', 607),
(8, 'alejandro.soto@example.com', '2022-12-10', 608),
(9, 'teresa.molina@example.com', '2022-03-17', 609),
(10, 'sergio.vidal@example.com', '2023-03-14', 610),
(11, 'rosa.moreno@example.com', '2021-07-10', 611),
(12, 'david.juarez@example.com', '2021-04-19', 612),
(13, 'camila.vera@example.com', '2021-08-01', 613),
(14, 'fernando.velasco@example.com', '2021-03-09', 614),
(15, 'patricia.solis@example.com', '2021-07-25', 615),
(16, 'roberto.marquez@example.com', '2020-06-20', 601),
(17, 'elena.castro@example.com', '2021-10-05', 602),
(18, 'carlos.pena@example.com', '2024-12-22', 603),
(19, 'lorena.aguilar@example.com', '2022-01-10', 604),
(20, 'oscar.medina@example.com', '2022-11-02', 605),
(21, 'daniela.gallegos@example.com', '2023-04-28', 606),
(22, 'jesus.barrios@example.com', '2023-10-28', 607),
(23, 'andrea.correa@example.com', '2023-07-08', 608),
(24, 'ivan.espinoza@example.com', '2021-06-23', 609),
(25, 'laura.jimenez@example.com', '2020-03-12', 610);

INSERT INTO Profesor (ProfesorID, DepartamentoID, Email) VALUES
(101, 501, 'carlos.sanchez@example.com'),
(102, 502, 'maria.rivera@example.com'),
(103, 503, 'jorge.torres@example.com'),
(104, 504, 'elena.prieto@example.com'),
(105, 505, 'antonio.mora@example.com'),
(106, 501, 'laura.rojas@example.com'),
(107, 502, 'roberto.lopez@example.com'),
(108, 503, 'ana.mendez@example.com'),
(109, 504, 'fernando.castro@example.com'),
(110, 505, 'patricia.gomez@example.com'),
(111, 501, 'susana.quispe@example.com'),
(112, 502, 'ricardo.luna@example.com'),
(113, 504, 'carmen.navarro@example.com'),
(114, 505, 'omar.paredes@example.com'),
(115, 503, 'silvia.casas@example.com');

INSERT INTO Tesis (TesisID, Titulo, FechaIni, FechaDef, EstudianteID, AsesorID) VALUES
(801, 'Sistemas de Energia Renovable', '2023-03-01', '2024-06-15', 1, 101),
(802, 'Analisis de Datos Masivos en Salud', '2023-02-15', '2024-05-20', 3, 102),
(803, 'Nuevas Tendencias en Robotica Educativa', '2023-04-10', '2024-08-30', 5, 104),
(804, 'Estudio de Materiales con Memoria de Forma', '2023-05-20', '2024-09-15', 7, 106),
(805, 'Impacto Ambiental de la Urbanizacion', '2023-01-25', '2024-07-30', 9, 108),
(806, 'Optimizacion de Redes Neuronales', '2023-06-15', '2024-10-05', 11, 110),
(807, 'Modelos Computacionales del Cambio Climatico', '2023-07-10', '2024-11-25', 13, 112),
(808, 'Tecnologias de Bioinformatica', '2023-08-05', '2025-01-20', 15, 114),
(809, 'Simulacion de Sistemas Mecatronicos', '2023-09-15', '2025-03-10', 17, 111),
(810, 'Estudios Avanzados en Fisica Cuantica', '2023-11-01', '2025-04-22', 19, 108),
(811, 'Innovaciones en Ingenieria Sismica', '2023-12-05', '2025-05-18', 2, 101),
(812, 'Aplicaciones de Inteligencia Artificial en Medicina', '2024-01-15', '2025-06-30', 4, 103),
(813, 'Avances en Fotonica y Optoelectronica', '2024-02-20', '2025-07-25', 6, 105),
(814, 'Tecnicas Modernas de Reciclaje', '2024-03-12', '2025-08-14', 8, 107),
(815, 'Nanotecnologia en la Industria Farmaceutica', '2024-04-08', '2025-09-20', 10, 109),
(816, 'Desarrollo de Sistemas Ciber-Fisicos', '2024-05-01', '2026-05-30', 12, 111),
(817, 'Tecnicas Avanzadas de Purificacion de Agua', '2024-06-10', '2026-07-15', 14, 113),
(818, 'Estudio de Sistemas de Aeronaves no Tripuladas', '2024-07-05', '2026-08-20', 16, 115),
(819, 'Innovacion en Fabricacion Aditiva', '2024-08-15', '2026-09-10', 18, 107),
(820, 'Estudios sobre el Impacto de Nanomateriales en el Medio Ambiente', '2024-09-01', '2026-10-15', 20, 109);

INSERT INTO Jurado (JuradoID, Rol) VALUES
(901, 'interno'),
(902, 'externo'),
(903, 'interno'),
(904, 'externo'),
(905, 'interno'),
(906, 'externo'),
(907, 'interno'),
(908, 'interno'),
(909, 'externo');

INSERT INTO Juzga (JuradoID, TesisID) VALUES
(901, 801),
(902, 802),
(903, 803),
(904, 804),
(905, 805),
(906, 806),
(907, 807),
(908, 808),
(909, 809),
(901, 810);

INSERT INTO Contiene (CursoID, ProgramaID) VALUES
(201, 601),
(202, 602),
(203, 603),
(204, 604),
(205, 605),
(206, 606),
(207, 607),
(208, 608),
(209, 609),
(210, 610),
(211, 611),
(212, 612),
(213, 613),
(214, 614),
(215, 615);


INSERT INTO Semestre (SemestreID, FechaIni, FechaClau) VALUES
('2023-1', '2023-01-10', '2023-06-20'),
('2023-2', '2023-07-10', '2023-12-20'),
('2024-1', '2024-01-10', '2024-06-20'),
('2024-2', '2024-07-10', '2024-12-20'),
('2025-1', '2025-01-10', '2025-06-20'),
('2025-2', '2025-07-10', '2025-12-20');

INSERT INTO Matricula (CursoID, EstudianteID, Semestre) VALUES
(201, 1, '2023-1'),
(202, 2, '2023-2'),
(203, 3, '2023-1'),
(204, 4, '2023-2'),
(205, 5, '2024-1'),
(206, 6, '2024-2'),
(207, 7, '2024-1'),
(208, 8, '2024-2'),
(209, 9, '2025-1'),
(210, 10, '2025-2'),
(211, 11, '2025-1'),
(212, 12, '2025-2'),
(213, 13, '2026-1'),
(214, 14, '2026-2'),
(215, 15, '2026-1');

INSERT INTO Dicta ( Semestre, CursoID, ProfesorID) VALUES
( '2023-1', 201, 101),
( '2023-2', 202, 102),
('2023-1', 203, 103),
( '2023-2', 204, 104),
('2024-2', 205, 105),
( '2024-1', 206, 106),
( '2024-2', 207, 107),
('2024-1', 208, 108),
( '2025-1', 209, 109),
( '2025-1', 210, 110);

INSERT INTO Persona (PersonaID, Nombres, Apellidos) VALUES
(1, 'Ana', 'Lopez'),
(2, 'Juan', 'Martinez'),
(3, 'Marta', 'Rivas'),
(4, 'Lucas', 'Fernandez'),
(5, 'Sofia', 'Guerra'),
(6, 'Pablo', 'Rojas'),
(7, 'Claudia', 'Bravo'),
(8, 'Alejandro', 'Soto'),
(9, 'Teresa', 'Molina'),
(10, 'Sergio', 'Vidal'),
(11, 'Rosa', 'Moreno'),
(12, 'David', 'Juarez'),
(13, 'Camila', 'Vera'),
(14, 'Fernando', 'Velasco'),
(15, 'Patricia', 'Solis'),
(16, 'Roberto', 'Marquez'),
(17, 'Elena', 'Castro'),
(18, 'Carlos', 'Peña'),
(19, 'Lorena', 'Aguilar'),
(20, 'Oscar', 'Medina'),
(21, 'Daniela', 'Gallegos'),
(22, 'Jesus', 'Barrios'),
(23, 'Andrea', 'Correa'),
(24, 'Ivan', 'Espinoza'),
(25, 'Laura', 'Jimenez'),
(101, 'Carlos', 'Sanchez'),
(102, 'Maria', 'Rivera'),
(103, 'Jorge', 'Torres'),
(104, 'Elena', 'Prieto'),
(105, 'Antonio', 'Mora'),
(106, 'Laura', 'Rojas'),
(107, 'Roberto', 'Lopez'),
(108, 'Ana', 'Mendez'),
(109, 'Fernando', 'Castro'),
(110, 'Patricia', 'Gomez'),
(111, 'Susana', 'Quispe'),
(112, 'Ricardo', 'Luna'),
(113, 'Carmen', 'Navarro'),
(114, 'Omar', 'Paredes'),
(115, 'Silvia', 'Casas'),
(901, 'Ana', 'López'),
(902, 'Juan', 'Martinez'),
(903, 'Marta', 'Rivas'),
(904, 'Lucas', 'Fernandez'),
(905, 'Sofía', 'Guerra'),
(906, 'Pablo', 'Rojas'),
(907, 'Claudia', 'Bravo'),
(908, 'Alejandro', 'Soto'),
(909, 'Teresa', 'Molina');

-- indices

CREATE INDEX apellido_ind
ON persona(apellidos);

CREATE INDEX nombre_ind
ON persona(nombres);

-- vistas

CREATE VIEW profesorAsesor AS
SELECT personaid as profesorID,nombres, apellidos FROM persona
WHERE personaid IN
    (SELECT asesorid FROM tesis
INTERSECT
SELECT profesorid FROM profesor);



CREATE VIEW EstudianteProgramaDespues2022 AS
SELECT EstudianteID,Email,FechaInscrip,p.nombre as Programa
FROM estudiante e
JOIN Programa p ON e.programaID = p.programaID
WHERE fechaInscrip > '2022-01-01';

CREATE VIEW DetalleEstudiantePrograma2022 AS
SELECT nombres,apellidos,ep.* FROM EstudianteProgramaDespues2022 ep
JOIN Persona ON PersonaID = ep.EstudianteID;

CREATE VIEW CursosSinDictar AS
SELECT c.* FROM curso c
NATURAL LEFT JOIN DICTA d
WHERE d.semestre IS NULL;

CREATE VIEW CursosDictados AS
SELECT * FROM curso
EXCEPT
SELECT * FROM CursosSinDictar;

CREATE VIEW ProfesoresFC AS
SELECT ProfesorID,nombres,apellidos,email,nombredep FROM Profesor
NATURAL JOIN Departamento
JOIN Persona ON PersonaID = ProfesorID
WHERE nomFacultad = 'Facultad de Ciencias';

-- funciones

CREATE OR REPLACE FUNCTION ObtenerInformacionTesis2024()
RETURNS TABLE(NombreEstudiante nombre, ApellidoEstudiante nombre, TituloTesis nombre, NombreProfesor nombre, ApellidoProfesor nombre) AS $$
BEGIN
    RETURN QUERY
    SELECT
        per.Nombres AS NombreEstudiante,
        per.Apellidos AS ApellidoEstudiante,
        t.Titulo AS TituloTesis,
        profPer.Nombres AS NombreProfesor,
        profPer.Apellidos AS ApellidoProfesor
    FROM
        Estudiante e
        INNER JOIN Persona per ON e.EstudianteID = per.PersonaID
        NATURAL JOIN Tesis t
        INNER JOIN Profesor prof ON t.AsesorID = prof.ProfesorID
        INNER JOIN Persona profPer ON prof.ProfesorID = profPer.PersonaID
    WHERE
        EXTRACT(YEAR FROM t.FechaDef) = 2024;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION ObtenerCursosProfesoresFisica()
RETURNS TABLE(NombreProfesor nombre, ApellidoProfesor nombre, NombreCurso nombre, SemestreDictado semestreAcadem) AS $$
BEGIN
    RETURN QUERY
    SELECT
        p.Nombres AS NombreProfesor,
        p.Apellidos AS ApellidoProfesor,
        c.Nombre AS NombreCurso,
        d.Semestre AS SemestreDictado
    FROM
        Profesor pr
        JOIN Departamento dep ON pr.DepartamentoID = dep.DepartamentoID
        JOIN Persona p ON pr.ProfesorID = p.PersonaID
        LEFT JOIN Dicta d ON pr.ProfesorID = d.ProfesorID
        LEFT JOIN Curso c ON d.CursoID = c.CursoID
    WHERE
        dep.NombreDep = 'Departamento de Fisica';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION ObtenerEstudiantesProgramacion()
RETURNS TABLE(NombreEstudiante nombre, ApellidoEstudiante nombre, SemestreInscrito semestreAcadem) AS $$
BEGIN
    RETURN QUERY
    SELECT
        p.Nombres AS NombreEstudiante,
        p.Apellidos AS ApellidoEstudiante,
        m.semestre AS SemestreInscrito
    FROM
        Estudiante e
        INNER JOIN Persona p ON e.EstudianteID = p.PersonaID
        INNER JOIN Matricula m ON e.EstudianteID = m.EstudianteID
        INNER JOIN Curso c ON m.CursoID = c.CursoID
    WHERE
        c.Nombre = 'Fundamentos de Programacion';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION ObtenerProfesoresPorSemestre2024()
RETURNS TABLE(NombreProfesor nombre, ApellidoProfesor nombre, Semestre semestreAcadem) AS $$
BEGIN
    RETURN QUERY
    SELECT
        p.Nombres AS NombreProfesor,
        p.Apellidos AS ApellidoProfesor,
        s.SemestreID AS Semestre
    FROM
        Profesor pr
        RIGHT JOIN Dicta d ON pr.ProfesorID = d.ProfesorID
        RIGHT JOIN Semestre s ON d.Semestre = s.SemestreID
        JOIN Persona p ON pr.ProfesorID = p.PersonaID
    WHERE
        s.SemestreID LIKE '2024-%';
END;
$$ LANGUAGE plpgsql;

CREATE PROCEDURE aMayus( INOUT string text)
LANGUAGE plpgsql
AS $$
BEGIN
string := upper(string);
END
$$;

-- insertar alumno
CREATE OR REPLACE FUNCTION InsertarEstudiante(p_EstudianteID int, p_Email varchar, p_FechaInscrip date, p_ProgramaID int)
RETURNS void AS $$
BEGIN
    INSERT INTO Estudiante (EstudianteID, Email, FechaInscrip, ProgramaID)
    VALUES (p_EstudianteID, p_Email, p_FechaInscrip, p_ProgramaID);
END;
$$ LANGUAGE plpgsql;

-- insertar curso
CREATE OR REPLACE FUNCTION InsertarCurso(p_CursoID int, p_Nombre varchar, p_Creditos int)
RETURNS void AS $$
BEGIN
    INSERT INTO Curso (CursoID, Nombre, Creditos)
    VALUES (p_CursoID, p_Nombre, p_Creditos);
END;
$$ LANGUAGE plpgsql;

-- insertar profesor
CREATE OR REPLACE FUNCTION InsertarProfesor(p_ProfesorID int, p_DepartamentoID int,p_Email varchar)
RETURNS void AS
$$
BEGIN
	INSERT INTO profesor
	VALUES ($1,$3,$2);
END;
$$ LANGUAGE plpgsql;

-- actualizar email estudiante
CREATE OR REPLACE FUNCTION ActualizarEmailEstudiante(p_EstudianteID int, p_nuevoEmail varchar)
RETURNS void AS $$
BEGIN
    UPDATE Estudiante
    SET Email = p_nuevoEmail
    WHERE EstudianteID = p_EstudianteID;
END;
$$ LANGUAGE plpgsql;

-- actualizar creditos de un curso
CREATE OR REPLACE FUNCTION ActualizarCreditosCurso(p_CursoID int, p_nuevosCreditos int)
RETURNS void AS $$
BEGIN
    UPDATE Curso
    SET Creditos = p_nuevosCreditos
    WHERE CursoID = p_CursoID;
END;
$$ LANGUAGE plpgsql;

-- actualizar el departamento de un profesor

CREATE OR REPLACE FUNCTION ActualizarDepartamentoProfesor(p_ProfesorID int, p_nuevoDepartamentoID int)
RETURNS void AS $$
BEGIN
    UPDATE Profesor
    SET DepartamentoID = p_nuevoDepartamentoID
    WHERE ProfesorID = p_ProfesorID;
END;
$$ LANGUAGE plpgsql;

-- eliminar estudiantes por programa y anho de inscripcion
CREATE OR REPLACE FUNCTION EliminarEstudiantesPorPrograma(p_ProgramaID int, p_AnoInscripcion int)
RETURNS void AS $$
BEGIN
    DELETE FROM Estudiante
    WHERE ProgramaID = p_ProgramaID AND EXTRACT(YEAR FROM FechaInscrip) = p_AnoInscripcion;
END;
$$ LANGUAGE plpgsql;

-- Stored Procedure para actulizar creditos de un curso
CREATE OR REPLACE PROCEDURE ActualizarCreditos(p_CursoID int, p_nuevosCreditos int)
LANGUAGE plpgsql AS $$
BEGIN
    IF p_nuevosCreditos >= 1 THEN
        UPDATE Curso SET Creditos = p_nuevosCreditos WHERE CursoID = p_CursoID;
    ELSE
        RAISE EXCEPTION 'Los créditos deben ser al menos 1.';
    END IF;
END;
$$;

-- trigger
	-- tabla de registro de cambios
CREATE TABLE LogCambioPrograma (
    LogID serial PRIMARY KEY,
    EstudianteID int,
    ProgramaAntiguoID int,
    ProgramaNuevoID int,
    FechaCambio timestamp DEFAULT CURRENT_TIMESTAMP
);
	-- funcion que se ejecutara por el cambio de programa
CREATE OR REPLACE FUNCTION fn_log_cambio_programa()
RETURNS trigger AS $$
BEGIN
    IF NEW.ProgramaID <> OLD.ProgramaID THEN
        INSERT INTO LogCambioPrograma(EstudianteID, ProgramaAntiguoID, ProgramaNuevoID)
        VALUES (NEW.EstudianteID, OLD.ProgramaID, NEW.ProgramaID);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
	-- trigger para el cambio de de programa
CREATE TRIGGER trg_log_cambio_programa
AFTER UPDATE OF ProgramaID ON Estudiante
FOR EACH ROW
EXECUTE FUNCTION fn_log_cambio_programa();


